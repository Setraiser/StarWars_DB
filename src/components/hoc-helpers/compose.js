/*Функция compose предназначена для более удобной композиции компонентов высшего порядка.
Первым аргументом принимаются функции в виде массива. Список функции становятся массивом благоодаря
спред опеатору  - ..., который автоматический делает массив. В другой анонимной функции передаем компонент
*/

const compose = (...funcs) => (component) => {
	/*Благодаря функции reduceRight мы можем читать массив справа на лево, т.е. выполнять функции поочередно,
	снизу-ввурх. Эта функция принимает 2 параметра: первый - это предыдущее значение (в текущем случае это prevResult,
	компонент, который мы будем оборачивать), 
	второй - текуще значение (в текущем случае это f, который оборачивает итог выполнения всех функция внутри. Функция,
	с который идет работа в данном случае).
	Вызывается функция f из массива funcs, ей передается компонент  - f(component).
	И так далее по цепочке, т.е. f1(f2(f3(component))), результат будет идти по цепочке справа на лево*/
	return funcs.reduceRight(
		(prevResult, f) => f(prevResult), component);
};

export default compose;